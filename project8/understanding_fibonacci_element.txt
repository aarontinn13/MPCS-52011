/************BOOTSTRAP*************/
//SP = 256
@256
D=A
@SP
M=D

/*call Sys.init*/
//push return-address
@RETURN_LABEL0
D=A
@SP
A=M
M=D
@SP
M=M+1

//push LCL
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1

//push ARG
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1

//push THIS
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1

//push THAT
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

//ARG = SP-n-5
@SP
D=M
@5
D=D-A
@0
D=D-A
@ARG
M=D

//LCL = SP
@SP
D=M
@LCL
M=D

//goto f
@Sys.init
0;JMP

//(return-address
(RETURN_LABEL0)



/***************MAIN FIBONACCI FUNCTION***************/
(Main.fibonacci)

//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1

//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@FALSE0
D;JGE
@SP
A=M-1
M=-1
@CONTINUE0
0;JMP
(FALSE0)
@SP
A=M-1
M=0
(CONTINUE0)

//ifgo-to IF_TRUE
@SP
AM=M-1
D=M
A=A-1
@IF_TRUE
D;JNE

// goto IF_FALSE
@IF_FALSE
0;JMP

//label if true
(IF_TRUE)

// push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1

/**********RETURN**********/
//FRAME = LCL
@LCL
D=M
@FRAME
M=D

//RET = *(FRAME - 5)
@5
A=D-A
D=M
@RET
M=D

//*ARG = pop()
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D

//SP = ARG+1
@ARG
D=M
@SP
M=D+1

//THAT = *(FRAME - 1)
@FRAME
D=M-1
AM=D
D=M
@THAT
M=D

//THIS = *(FRAME - 2)
@FRAME
D=M-1
AM=D
D=M
@THIS
M=D

//ARG = *(FRAME - 3)
@FRAME
D=M-1
AM=D
D=M
@ARG
M=D

//LCL = *(FRAME - 4)
@FRAME
D=M-1
AM=D
D=M
@LCL
M=D

//goto RET
@RET
A=M
0;JMP
/************end return *************/

//label IF_FALSE
(IF_FALSE)

//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1

//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D

/************** call main fibonacci ****************/
//push return-address
@RETURN_LABEL1
D=A
@SP
A=M
M=D
@SP
M=M+1

//push LCL
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1

//push ARG
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1

//push THIS
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1

//push THAT
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

//ARG = SP-n-5
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D

//LCL = SP
@SP
D=M
@LCL
M=D

//goto f
@Main.fibonacci
0;JMP

//(return-address)
(RETURN_LABEL1)

//push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1

//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1

//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D

/************* call main fibonacci ****************/
//push return-address
@RETURN_LABEL2
D=A
@SP
A=M
M=D
@SP
M=M+1

//push LCL
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1

//push ARG
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1

//push THIS
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1

//push THAT
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

//ARG = SP-n-5
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D

//LCL = SP
@SP
D=M
@LCL
M=D

//goto f
@Main.fibonacci
0;JMP

//(return-address)
(RETURN_LABEL2)


//add
@SP
AM=M-1
D=M
A=A-1
M=M+D




/********************return*********************/
//FRAME = LCL
@LCL
D=M
@FRAME
M=D

//RET = *(FRAME-5)
@5
A=D-A
D=M
@RET
M=D

//*ARG = pop()
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D

//SP = ARG+1
@ARG
D=M
@SP
M=D+1

//THAT = *(FRAME-1)
@FRAME
D=M-1
AM=D
D=M
@THAT
M=D

//THIS = *(FRAME-2)
@FRAME
D=M-1
AM=D
D=M
@THIS
M=D

//ARG = *(FRAME-3)
@FRAME
D=M-1
AM=D
D=M
@ARG
M=D

//LCL = *(FRAME-4)
@FRAME
D=M-1
AM=D
D=M
@LCL
M=D

//goto RET
@RET
A=M
0;JMP









/* Sys.init function */
(Sys.init)
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1

/* Call main.fibonacci 1 */
//push return-address
@RETURN_LABEL3
D=A
@SP
A=M
M=D
@SP
M=M+1

//push LCL
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1

//push ARG
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1

//push THIS
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1

//push THAT
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

//ARG = SP-n-5
@SP
D=M
@5
D=D-A
@1
D=D-A
@ARG
M=D

//LCL = SP
@SP
D=M
@LCL
M=D

//goto RET
@Main.fibonacci
0;JMP

//declare return address
(RETURN_LABEL3)

//label WHILE
(WHILE)

//goto WHILE
@WHILE
0;JMP